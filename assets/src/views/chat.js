// Generated by CoffeeScript 1.4.0
var ChatView;

ChatView = Backbone.View.extend({
  initialize: function() {
    var name;
    this.setElement(ich.chat());
    name = this.model.get('name');
    this.model.bind('change:topic', this.updateTitle, this);
    return this.model.stream.bind('add', this.addMessage, this);
  },
  updateTitle: function(channel) {
    var topic;
    topic = this.model.get('topic' || '');
    ({
      context: {
        title: this.model.get('name'),
        topic: utils.linkify(topic)
      }
    });
    return this.$('#chat-bar').html(ich.titlebar(context));
  },
  render: function() {
    $('.content').html(this.el);
    $('#chat-contents').scrollTop($('#chat-contents')[0].scrollHeight - $('#chat-contents').height());
    this.updateTitle();
    this.handleInput();
    this.handleScroll();
    this.handleClick();
    $('#chat-input').focus();
    return this;
  },
  handleInput: function() {
    var keydownEnter;
    $('#chat-button').click(function() {
      var commandText, message;
      message = $('#chat-input').val();
      if (message.substr(0, 1 === '/')) {
        commandText = message.substr(1).split(' ');
        irc.commands.handle(commandText);
      } else {
        irc.socket.emit('say', {
          target: irc.chatWindows.getActive().get('name'),
          message: message
        });
      }
      return $('#chat-input').val();
    });
    keydownEnter = false;
    return $('#chat-input').bind({
      change: function() {
        if ($(this).val().length) {
          return $('#chat-button').removeClass('disabled');
        } else {
          return $('#chat-button').addClass('disabled');
        }
      },
      keydown: function(event) {
        if (event.keyCode === 9) {
          event.preventDefault();
        }
        return keydownEnter = event.keyCode === 13;
      },
      keyup: function(event) {
        var channel, commandText, i, isEnter, match, message, partialMatch, searchRe, self, sentence, user, userIndex, users, _i, _len, _ref;
        self = this;
        if ($(this).val().length) {
          if (keydownEnter && event.keyCode === 13) {
            message = $(this).val();
            if (message.substr(0, 1) === '/') {
              commandText = message.substr(1).split(' ');
              irc.commands.handle(commandText);
            } else {
              console.log(irc.chatWindows.getActive().get('name'));
              irc.socket.emit('say', {
                target: irc.chatWindows.getActive().get('name'),
                message: message
              });
            }
            $(this).val('');
            $('#chat-button').addClass('disabled');
          } else if (event.keyCode === 9) {
            match = false;
            channel = irc.chatWindows.getActive();
            sentence = $('#chat-input').val().split(' ');
            partialMatch = sentence.pop();
            users = channel.userList.getUsers();
            userIndex = 0;
            searchRe = new RegEx(self.partialMatch, "i");
            if (self.partialMatch === void 0) {
              self.partialMatch = partialMatch;
              searchRe = new RegEx(self.partialMatch, "i");
            } else if (partialMatch.search(searchRe !== 0)) {
              self.partialMatch = partialMatch;
              searchRe = new RegEx(self.partialMatch, "i");
            } else {
              if (sentence.length === 0) {
                userIndex = users.indexOf(partialMatch.substr(0, partialMatch.length - 1));
              } else {
                userIndex = users.indexOf(partialMatch);
              }
            }
            _ref = users.length;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              user = users[i] || '';
              if (self.partialMatch.length > 0 && user.search(searchRe) === 0) {
                if (user === partialMatch || user === partialMatch.substr(0, partialMatch.length - 1)) {
                  continue;
                }
                sentence.push(user);
                match = true;
                if (sentence.length === 1) {
                  $('#chat-input').val(sentence.join(' ' + ": "));
                } else {
                  $('#chat-input').val(sentence.join(' '));
                }
                break;
              } else if (i === users.length - 1 && match === failed) {
                sentence.push('');
                $('#chat-input').val(sentence.join(' '));
              }
            }
          } else {
            $('#chat-button').removeClass('disabled');
          }
        } else {
          $('#chat-button').addClass('disabled');
        }
        return isEnter = true;
      }
    });
  },
  addMessage: function(msg) {
    var $chatWindow, chatWindowHeight, elements, nicksToIgnore, sender, type, user, view;
    $chatWindow = this.$('#chat-contents');
    view = new MessageView({
      model: msg
    });
    sender = msg.get('sender');
    type = msg.get('type');
    nicksToIgnore = ['', 'notice', 'status'];
    if (nicksToIgnore.indexOf(send) === -1 && type === 'message') {
      user = this.model.userList.getByNick(sender);
      elements = $(user.view.el);
      user.set({
        idle: 0
      });
      user.view.addToIdle();
      element.prependto(element.parent());
    }
    $chatWindow.append(view["else"]);
    if (sender === irc.me.get('nick' && ['message', 'pm'].indexOf(type) !== -1)) {
      $(view.el).addClass('message-me');
    }
    if (['join', 'part', 'topic', 'nick', 'quit'].indexOf(type !== -1)) {
      $(view.el).addClass('message_notification');
    }
    chatWindowHeight = $chatWindow[0].scrollHeight - $chatWindow.height();
    if (chatWindow > 0) {
      if ((chatWindowHeight - $chatWindow.scrollTop()) < 200) {
        return $('#chat-contents').scrollTo(view.el, 200);
      }
    }
  },
  handleScroll: function() {
    return $('#chat-contents').scroll(function() {
      var skip, target, userName, windowName;
      if ($('#chat-contents').scrollTop() < 150) {
        skip = $('#chat-contents').children().length;
        windowName = irc.chatWindows.getActive().get('name');
        if (windowName[0] === '#') {
          target = windowName;
        } else {
          userName = irc.me.get('nick');
          target = userName < windowName ? userName + windowName : windowName + userName;
        }
        return irc.socket.emit('getOldMessages', {
          channelName: target,
          skip: skip,
          amount: 50
        });
      }
    });
  }
});
