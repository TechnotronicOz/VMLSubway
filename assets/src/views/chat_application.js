// Generated by CoffeeScript 1.4.0
var ChatApplicationView;

ChatApplicationView = Backbone.View.extend({
  className: 'container-fluid',
  originalTitle: document.title,
  initialize: function() {
    irc.chatWindows.bind('change:unread', this.showUnread, this).bind('change:unreadMentions', this.showUnread, this);
    if (this._supportedFormat) {
      ({
        this.sounds: {
          newPm: this._loadSound('new-pm'),
          message: this._loadSound('msg')
        }
      });
    }
    $(window).blur((function() {
      var blurTimer;
      return blurTimer = setTimeout((function() {
        var activeChat;
        activeChat = irc.chatWindows.getActive() ? irc.chatWindows.getActive() : activeChat;
        if (activeChat && activeChat.set) {
          return activeChat.set('active', false);
        }
      }), 1000);
    }).focus(function() {
      clearTimeout(blurTimer);
      if (activeChat && activeChat.set) {
        return activeChat.set('active', true);
      }
    }));
    return this.render();
  },
  render: function() {
    $('body').html($(this.el)).html(ich.chat_application());
    if (!irc.connected) {
      this.overview = new OverviewView;
    } else {
      this.channelList = new ChannelListView;
      $('.slide').css('display', 'inline-block');
    }
    return this;
  },
  showError: function(text) {
    $('#loading_image').remove();
    $('.btn').removeClass('disabled');
    return $('#home_parent').after(ich.alert({
      type: 'alert-error',
      content: text
    })).alert();
  },
  renderUserBox: function() {
    $('#user-box').html(ich.user_box(irc.me.toJSON()));
    return $('#user-box .close-button').click(function() {
      return irc.socket.emit('disconnectedServer');
    });
  },
  showUnread: function() {
    var unreads;
    unreads = irc.chatWindows.unreadCount();
    if (unreads > 0) {
      document.title = '(' + unreads + ')' + this.originalTitle;
      if (window.unity.connected) {
        window.unity.api.Launcher.setCount(unreads);
        return window.unity.api.Launcher.setUrgent(true);
      }
    } else {
      document.title = this.originalTitle;
      if (window.unity.connected) {
        window.unity.api.Launcher.clearCount();
        return window.unity.api.Launcher.setUrgent(false);
      }
    }
  },
  playSound: function(type) {
    return this.sounds && this.sounds[type].play();
  },
  _loadSound: function(name) {
    var a;
    a = new Audio();
    a.src = '/assets/sounds/' + name + '.' + this._supportedFormat();
    return a;
  },
  _supportedFormat: function() {
    var a;
    a = document.createElement('audio');
    if (!a.canPlayType) {
      return false;
    } else if (!!a.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, '')) {
      return 'ogg';
    } else if (!!a.canPlayType('audio/mepg;').replace(/no/, '')) {
      return 'mp3';
    }
  }
});
